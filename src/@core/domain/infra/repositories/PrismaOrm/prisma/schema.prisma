// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id          String   @id @default(uuid()) @db.VarChar(36)
  name        String   @db.VarChar(255)
  active      Boolean  @default(true)
  created_at  DateTime @default(now())

  users       UsersOnAccounts[]
  wallets     Wallet[]
  expenses    Expense[]
  
  @@map("accounts")
}

model User {
  id         String   @id @default(uuid()) @db.VarChar(36)
  name       String   @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  auth_id    String?  @db.VarChar(255)
  created_at DateTime @default(now())

  expenses           Expense[]
  purchases          Purchase[]
  recurring_bills    RecurringBill[]
  wallets            Wallet[]
  credit_cards       CreditCard[]
  accounts           UsersOnAccounts[]
  
  @@map("users")
}

model UsersOnAccounts {
  user        User      @relation(fields: [user_id], references: [id])
  user_id     String    @db.VarChar(36)
  account     Account   @relation(fields: [account_id], references: [id])
  account_id  String    @db.VarChar(36)
  assignedAt  DateTime  @default(now())
  is_owner    Boolean   @default(true)
  active      Boolean   @default(true)

  @@id([user_id, account_id])

  @@map("users_accounts")
}


model Expense {
  id                   String            @id @default(uuid()) @db.VarChar(36)
  name                 String
  amount               Float             @db.Real()
  due_date             DateTime          @default(now())
  active               Boolean           @default(true)
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt
  user_id              String            @db.VarChar(36)
  user                 User              @relation(fields: [user_id], references: [id])
  purchase_id          String?           @default(dbgenerated("NULL")) @db.VarChar(36)
  purchase             Purchase?         @relation(fields: [purchase_id], references: [id], onDelete: Cascade)
  recurring_bill       RecurringBill?    @relation(fields: [recurring_bill_id], references: [id])
  recurring_bill_id    String?           @default(dbgenerated("NULL")) @db.VarChar(36)
  wallet_id            String?           @default(dbgenerated("NULL")) @db.VarChar(36)
  wallet               Wallet?           @relation(fields: [wallet_id], references: [id])
  credit_card_id       String?           @default(dbgenerated("NULL")) @db.VarChar(36)
  credit_card          CreditCard?       @relation(fields: [credit_card_id], references: [id])
  paid_at              DateTime?         @default(dbgenerated("NULL"))
  account_id           String?           @db.VarChar(36)
  account              Account?          @relation(fields: [account_id], references: [id])
  
  @@map("expenses")
}

enum PaymentMethod {
  DEBIT
  CREDIT
}

model Purchase {
  id             String        @id @default(uuid()) @db.VarChar(36)
  name           String
  total_amount   Float         @db.Real()
  portions       Int           @db.SmallInt()
  payment_method PaymentMethod @default(DEBIT)
  due_date       DateTime      @default(now())
  active         Boolean       @default(true)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  expenses       Expense[]
  user_id        String        @db.VarChar(36)
  user           User          @relation(fields: [user_id], references: [id])
  wallet_id      String?       @db.VarChar(36)
  wallet         Wallet?        @relation(fields: [wallet_id], references: [id])
  credit_card_id String?        @db.VarChar(36)
  credit_card    CreditCard?    @relation(fields: [credit_card_id], references: [id])
  
  @@map("purchases")
}

model RecurringBill {
  id               String    @id @default(uuid()) @db.VarChar(36)
  name             String
  estimated_amount Float     @db.Real()
  due_date         DateTime  @default(now())
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  active           Boolean   @default(true)
  expenses         Expense[]
  user_id          String    @db.VarChar(36)
  user             User      @relation(fields: [user_id], references: [id])

  @@map("recurring_bills")
}


model Wallet {
  id               String    @id @default(uuid()) @db.VarChar(36)
  name             String
  amount Float     @db.Real()
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  active           Boolean   @default(true)
  user_id          String    @db.VarChar(36)
  user             User      @relation(fields: [user_id], references: [id])
  purchases        Purchase[]
  expenses         Expense[]
  account_id       String?   @db.VarChar(36)
  account          Account?  @relation(fields: [account_id], references: [id])

  @@map("wallets")
}


model CreditCard {
  id               String    @id @default(uuid()) @db.VarChar(36)
  name             String
  spent_amount     Float     @db.Real()
  total_limit      Float     @db.Real()
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  active           Boolean   @default(true)
  user_id          String    @db.VarChar(36)
  user             User      @relation(fields: [user_id], references: [id])
  purchases        Purchase[]
  expenses         Expense[]

  @@map("credit_cards")
}
